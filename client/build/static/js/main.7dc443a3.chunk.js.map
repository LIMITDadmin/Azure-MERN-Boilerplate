{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cellSet","day","val","chips","i","length","push","Chip","p","color","size","label","TableCell","style","cellStyle","align","onClick","e","alert","screenX","screenY","weekday","includes","backgroundColor","DenseTable","rowsy","value","classes","useStyles","TableContainer","component","Paper","Table","className","table","TableHead","TableRow","colSpan","TableBody","map","row","Jan","Jan_val","Feb","Feb_val","Mar","Mar_val","Apr","Apr_val","May","May_val","Jun","Jun_val","Jul","Jul_val","Aug","Aug_val","Sep","Sep_val","Oct","Oct_val","Nov","Nov_val","Dec","Dec_val","id","makeStyles","minWidth","month_config","App","props","Date","rows","curDay","cells","curMonth","getDate","dateEntry","toLocaleDateString","state","bestShows","JSON","parse","stringify","this","setState","console","log","axios","get","then","res","data","forEach","index","dat","getMonth","catch","Button","btnPush","Object","keys","key","cur","idx","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7dc443a3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport \"./index.css\";\r\nimport DataGrid from 'react-data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { spacing } from '@material-ui/system';\r\n\r\n\r\nconst theme = {\r\n  spacing: 0,\r\n  padding: 0,\r\n}\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nfunction cellSet(day, val) {\r\n  var chips = [];\r\n\r\n  if(val != null){\r\n    for(var i=0;i<val.length;i++){\r\n      chips.push(<Chip  p={0} color=\"primary\" size=\"small\" label={val[i]}/>)\r\n    }\r\n  }\r\n  return [\r\n\r\n    <TableCell style={cellStyle(day)}  p={0} align=\"left\" onClick={(e)=>{alert(\"hi \"+day+\" x: \"+e.screenX+\" y:\"+e.screenY)}}>\r\n    {day}\r\n    </TableCell>,\r\n  <TableCell style={cellStyle(day)}  p={0} align=\"left\" onClick={(e)=>{alert(\"hi \"+day+\" x: \"+e.screenX+\" y:\"+e.screenY)}}>\r\n    {chips}\r\n    </TableCell>\r\n  ]\r\n}\r\n\r\n\r\nfunction cellStyle(weekday){\r\n  return (weekday.includes(\"Sa\") || weekday.includes(\"So\")) ? {backgroundColor: 'lightgrey'}:{}\r\n}\r\n\r\nfunction DenseTable({value:rowsy}) {\r\n  const classes = useStyles();\r\n  const colSpanTop = 2;\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow p={0} >\r\n            <TableCell p={0} colSpan={colSpanTop}>Januar</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>Februar</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>MÃ¤rz</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>April</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>Mai</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>Juni</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>Juli</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>August</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>September</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>Oktober</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>November</TableCell>\r\n            <TableCell p={0} colSpan={colSpanTop}>Dezember</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody p={0} >\r\n          {rowsy.map((row) => (\r\n            <TableRow p={0} key={row.id}>\r\n             {cellSet(row.Jan,row.Jan_val)}\r\n             {cellSet(row.Feb,row.Feb_val)}\r\n             {cellSet(row.Mar,row.Mar_val)}\r\n             {cellSet(row.Apr, row.Apr_val)}\r\n             {cellSet(row.May,row.May_val)}\r\n             {cellSet(row.Jun,row.Jun_val)}\r\n             {cellSet(row.Jul,row.Jul_val)}\r\n             {cellSet(row.Aug,row.Aug_val)}\r\n             {cellSet(row.Sep,row.Sep_val)}\r\n             {cellSet(row.Oct,row.Oct_val)}\r\n             {cellSet(row.Nov,row.Nov_val)}\r\n             {cellSet(row.Dec,row.Dec_val)}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\n\r\nconst month_config = [\r\n  \"Jan\",\r\n  \"Feb\",\r\n  \"Mar\",\r\n  \"Apr\", \r\n  \"May\", \r\n  \"Jun\", \r\n  \"Jul\", \r\n  \"Aug\", \r\n  \"Sep\", \r\n  \"Oct\", \r\n  \"Nov\", \r\n  \"Dec\"\r\n];\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var startDate = new Date(2021, 0, 1);\r\n    var endDate = new Date(2021, 11, 31);\r\n    var daysOfYear = [];\r\n    const maxDaysInMonth = 31;\r\n    const year = 2021;\r\n\r\n    // cycle months, start new column for each month\r\n   \r\n  \r\n    var rows = [];\r\n    \r\n    //cycle through days, add new row for each day and empty strings until 31\r\n    for(var curDay = 1; curDay <= maxDaysInMonth; curDay ++){\r\n      var cells = [];\r\n      cells.push(curDay);\r\n      for (var curMonth = 0; curMonth < 12; curMonth ++) {\r\n          //get days in the month\r\n          var daysInMonth = new Date(year, curMonth+1, 0).getDate();\r\n          var value = \"\";\r\n        \r\n    \r\n        if (curDay <= daysInMonth){\r\n          //add date\r\n          var dateEntry = new Date(year,curMonth,curDay);\r\n          const options1 = { weekday: 'short'};\r\n          const options2 = { day: 'numeric' };\r\n          value = \"\"+dateEntry.toLocaleDateString('de-DE', options2)+\" \"+dateEntry.toLocaleDateString('de-DE', options1); \r\n        }else{\r\n          //add empty string  \r\n        }\r\n        \r\n        cells.push(value);\r\n      }\r\n      rows.push( { \r\n        id: cells[0], \r\n        Jan:cells[1], \r\n        Feb: cells[2], \r\n        Mar: cells[3], \r\n        Apr: cells[4], \r\n        May: cells[5], \r\n        Jun: cells[6], \r\n        Jul: cells[7], \r\n        Aug: cells[8], \r\n        Sep: cells[9], \r\n        Oct: cells[10], \r\n        Nov: cells[11], \r\n        Dec: cells[12],\r\n        Jan_val: [], \r\n        Feb_val: [], \r\n        Mar_val: [], \r\n        Apr_val: [], \r\n        May_val: [], \r\n        Jun_val: [], \r\n        Jul_val: [], \r\n        Aug_val: [], \r\n        Sep_val: [], \r\n        Oct_val: [], \r\n        Nov_val: [], \r\n        Dec_val: [],\r\n      })\r\n    }\r\n\r\n    /*for (var d = startDate; d <= endDate; d.setDate(d.getDate() + 1)) {\r\n        daysOfYear.push(new Date(d));\r\n    }*/\r\n\r\n   \r\n    /*for (var r = 0; r < daysOfYear.length;r++) {\r\n      rows.push( { id: r, title: daysOfYear[r].toLocaleDateString() })\r\n      \r\n    }*/\r\n  \r\n\r\n    this.state = {\r\n      bestShows: [],\r\n      rows : rows\r\n    };\r\n  }\r\n\r\n\r\n  btnPush (){\r\n    var rowCpy =  JSON.parse(JSON.stringify(this.state.rows));\r\n    //rowCpy[1][\"Jan\"] = \"Got ya\"; no copy needed\r\n    this.state.rows[1][\"Jan\"] = \"Got ya\";\r\n    this.setState({rows:this.state.rows});\r\n  }\r\n\r\n  \r\n   componentDidMount() {\r\n    console.log(\"componentDidMount success\")\r\n    axios.get('/api/data')\r\n      .then(res => {\r\n        console.log(\"data recieved: \", res.data);\r\n        this.setState({ bestShows: res.data });\r\n        this.state.bestShows.forEach(\r\n          (value, index)=>{\r\n          var dat = new Date(value[\"date\"])\r\n          this.state.rows[dat.getDate()][month_config[dat.getMonth()]+\"_val\"].push(value[\"desc\"])\r\n          console.log(\"gefunden, tag: \"+dat.getDate()+\" Monat: \"+dat.getMonth()+\" desc: \"+value[\"desc\"])\r\n        })\r\n        console.log(\"changed after load: \"+this.state.rows)\r\n      this.setState({rows:this.state.rows});\r\n      })\r\n      .catch(alert);\r\n      \r\n  }\r\n\r\n  render() {\r\n    console.log(\"render bestShows: \", this.state.bestShows)\r\n    return (\r\n      <div>\r\n        <Button onClick={()=>{this.btnPush()}}> push me </Button>\r\n       <DenseTable value={this.state.rows}/>\r\n        <ul>\r\n          {\r\n          \r\n\r\n              Object.keys(this.state.bestShows).map((key, i) => (\r\n                Object.keys(this.state.bestShows[key]).map((cur, idx) => (\r\n                  <li>{cur} - {this.state.bestShows[key][cur]} </li>\r\n                ))\r\n              ))\r\n\r\n    \r\n                }\r\n        </ul>\r\n        \r\n       \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}