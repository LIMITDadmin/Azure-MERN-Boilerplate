{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cellSet","day","TableCell","style","cellStyle","align","onClick","e","alert","screenX","screenY","weekday","includes","backgroundColor","DenseTable","rowsy","value","classes","useStyles","TableContainer","component","Paper","Table","className","table","size","TableHead","TableRow","colSpan","TableBody","map","row","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","id","makeStyles","minWidth","App","props","Date","rows","curDay","cells","push","curMonth","getDate","dateEntry","toLocaleDateString","state","bestShows","columns","key","name","width","args","type","JSON","parse","stringify","this","setState","console","log","axios","get","then","res","data","catch","Button","btnPush","Object","keys","i","cur","idx","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afadfb16.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport \"./index.css\";\r\nimport DataGrid from 'react-data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nfunction cellSet(day) {\r\n  return [\r\n  <TableCell style={cellStyle(day)} align=\"left\">{day}</TableCell>,\r\n  <TableCell style={cellStyle(day)} align=\"left\" onClick={(e)=>{alert(\"hi \"+day+\" x: \"+e.screenX+\" y:\"+e.screenY)}}>...</TableCell>\r\n  ]\r\n}\r\n\r\n\r\nfunction cellStyle(weekday){\r\n  return (weekday.includes(\"Sa\") || weekday.includes(\"So\")) ? {backgroundColor: 'lightgrey'}:{}\r\n}\r\n\r\nfunction DenseTable({value:rowsy}) {\r\n  const classes = useStyles();\r\n  const colSpanTop = 2;\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell colSpan={colSpanTop}>Januar</TableCell>\r\n            <TableCell colSpan={colSpanTop}>Februar</TableCell>\r\n            <TableCell colSpan={colSpanTop}>MÃ¤rz</TableCell>\r\n            <TableCell colSpan={colSpanTop}>April</TableCell>\r\n            <TableCell colSpan={colSpanTop}>Mai</TableCell>\r\n            <TableCell colSpan={colSpanTop}>Juni</TableCell>\r\n            <TableCell colSpan={colSpanTop}>Juli</TableCell>\r\n            <TableCell colSpan={colSpanTop}>August</TableCell>\r\n            <TableCell colSpan={colSpanTop}>September</TableCell>\r\n            <TableCell colSpan={colSpanTop}>Oktober</TableCell>\r\n            <TableCell colSpan={colSpanTop}>November</TableCell>\r\n            <TableCell colSpan={colSpanTop}>Dezember</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rowsy.map((row) => (\r\n            <TableRow key={row.id}>\r\n             {cellSet(row.Jan)}\r\n             {cellSet(row.Feb)}\r\n             {cellSet(row.Mar)}\r\n             {cellSet(row.Apr)}\r\n             {cellSet(row.May)}\r\n             {cellSet(row.Jun)}\r\n             {cellSet(row.Jul)}\r\n             {cellSet(row.Aug)}\r\n             {cellSet(row.Sep)}\r\n             {cellSet(row.Oct)}\r\n             {cellSet(row.Nov)}\r\n             {cellSet(row.Dec)}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var startDate = new Date(2021, 0, 1);\r\n    var endDate = new Date(2021, 11, 31);\r\n    var daysOfYear = [];\r\n    const maxDaysInMonth = 31;\r\n    const year = 2021;\r\n\r\n    // cycle months, start new column for each month\r\n   \r\n  \r\n    var rows = [];\r\n    \r\n    //cycle through days, add new row for each day and empty strings until 31\r\n    for(var curDay = 1; curDay <= maxDaysInMonth; curDay ++){\r\n      var cells = [];\r\n      cells.push(curDay);\r\n      for (var curMonth = 0; curMonth < 12; curMonth ++) {\r\n          //get days in the month\r\n          var daysInMonth = new Date(year, curMonth+1, 0).getDate();\r\n          var value = \"\";\r\n        \r\n    \r\n        if (curDay <= daysInMonth){\r\n          //add date\r\n          var dateEntry = new Date(year,curMonth,curDay);\r\n          const options1 = { weekday: 'short'};\r\n          const options2 = { day: 'numeric' };\r\n          value = \"\"+dateEntry.toLocaleDateString('de-DE', options2)+\" \"+dateEntry.toLocaleDateString('de-DE', options1); \r\n        }else{\r\n          //add empty string  \r\n        }\r\n        \r\n        cells.push(value);\r\n      }\r\n      rows.push( { id: cells[0], Jan:cells[1], Feb: cells[2], Mar: cells[3], Apr: cells[4], May: cells[5], Jun: cells[6], Jul: cells[7], Aug: cells[8], Sep: cells[9], Oct: cells[10], Nov: cells[11], Dec: cells[12]})\r\n    }\r\n\r\n    /*for (var d = startDate; d <= endDate; d.setDate(d.getDate() + 1)) {\r\n        daysOfYear.push(new Date(d));\r\n    }*/\r\n\r\n   \r\n    /*for (var r = 0; r < daysOfYear.length;r++) {\r\n      rows.push( { id: r, title: daysOfYear[r].toLocaleDateString() })\r\n      \r\n    }*/\r\n  \r\n\r\n    this.state = {\r\n      bestShows: [],\r\n      rows : rows,\r\n      columns : [\r\n        { key: 'id', name: 'ID' , width: 10},\r\n        { key: 'Jan', name: 'Januar', colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Jan_val', name: '',  width: 170},\r\n        { key: 'Feb', name: 'Februar',colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Feb_val', name: '', width: 170 },\r\n        { key: 'Mar', name: 'MÃ¤rz' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Mar_val', name: '' },\r\n        { key: 'Apr', name: 'April' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Apr_val', name: '' },\r\n        { key: 'May', name: 'Mai' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'May_val', name: '' },\r\n        { key: 'Jun', name: 'Juni' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Jun_val', name: '' },\r\n        { key: 'Jul', name: 'Juli' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Jul_val', name: '' },\r\n        { key: 'Aug', name: 'August',colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Aug_val', name: '' },\r\n        { key: 'Sep', name: 'September' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Sep_val', name: '' },\r\n        { key: 'Oct', name: 'Oktober',colSpan(args) { if (args.type === 'HEADER') {return 2;}} },\r\n        { key: 'Oct_val', name: '' },\r\n        { key: 'Nov', name: 'November' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Nov_val', name: '' },\r\n        { key: 'Dec', name: 'Dezember' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Dec_val', name: '' },\r\n      ]\r\n    };\r\n  }\r\n\r\n\r\n  btnPush (){\r\n    var rowCpy =  JSON.parse(JSON.stringify(this.state.rows));\r\n    //rowCpy[1][\"Jan\"] = \"Got ya\"; no copy needed\r\n    this.state.rows[1][\"Jan\"] = \"Got ya\";\r\n    this.setState({rows:this.state.rows});\r\n  }\r\n  \r\n   componentDidMount() {\r\n    console.log(\"componentDidMount success\")\r\n    axios.get('/api/data')\r\n      .then(res => {\r\n        console.log(\"data recieved: \", res.data);\r\n        this.setState({ bestShows: res.data });\r\n      })\r\n      .catch(alert);\r\n  }\r\n\r\n  render() {\r\n    console.log(\"render bestShows: \", this.state.bestShows)\r\n    return (\r\n      <div>\r\n        <Button onClick={()=>{this.btnPush()}}> push me </Button>\r\n       <DenseTable value={this.state.rows}/>\r\n        <ul>\r\n          {\r\n          \r\n\r\n              Object.keys(this.state.bestShows).map((key, i) => (\r\n                Object.keys(this.state.bestShows[key]).map((cur, idx) => (\r\n                  <li>{cur} - {this.state.bestShows[key][cur]} </li>\r\n                ))\r\n              ))\r\n\r\n    \r\n                }\r\n        </ul>\r\n        \r\n       \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}