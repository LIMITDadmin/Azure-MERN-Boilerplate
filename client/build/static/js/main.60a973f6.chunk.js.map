{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["createData","name","calories","fat","carbs","protein","rowsy","DenseTable","classes","useStyles","TableContainer","component","Paper","Table","className","table","size","TableHead","TableRow","TableCell","colSpan","align","TableBody","map","row","scope","onClick","alert","makeStyles","minWidth","App","props","Date","rows","curDay","cells","push","curMonth","value","getDate","dateEntry","toLocaleDateString","day","weekday","id","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec","state","bestShows","columns","key","width","args","type","console","log","this","Object","keys","i","cur","idx","Button","variant","color","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.60a973f6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from 'axios';\r\nimport \"./index.css\";\r\nimport DataGrid from 'react-data-grid';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rowsy = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nfunction DenseTable() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table className={classes.table} size=\"small\" aria-label=\"a dense table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell colSpan={2}>Dessert (100g serving)</TableCell>\r\n            <TableCell align=\"right\">Calories</TableCell>\r\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rowsy.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.calories}</TableCell>\r\n              <TableCell align=\"right\" onClick={()=>alert(\"huhu\")}>{row.fat}</TableCell>\r\n              <TableCell align=\"right\">{row.carbs}</TableCell>\r\n              <TableCell align=\"right\">{row.protein}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n});\r\n\r\nfunction componentDidMount() {\r\n  console.log(\"componentDidMount success\")\r\n  axios.get('/api/data')\r\n    .then(res => {\r\n      console.log(\"data recieved: \", res.data);\r\n      this.setState({ bestShows: res.data });\r\n    })\r\n    .catch(alert);\r\n}\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    var startDate = new Date(2021, 0, 1);\r\n    var endDate = new Date(2021, 11, 31);\r\n    var daysOfYear = [];\r\n    const maxDaysInMonth = 31;\r\n    const year = 2021;\r\n\r\n    // cycle months, start new column for each month\r\n   \r\n  \r\n    var rows = [];\r\n    \r\n    //cycle through days, add new row for each day and empty strings until 31\r\n    for(var curDay = 1; curDay <= maxDaysInMonth; curDay ++){\r\n      var cells = [];\r\n      cells.push(curDay);\r\n      for (var curMonth = 0; curMonth < 12; curMonth ++) {\r\n          //get days in the month\r\n          var daysInMonth = new Date(year, curMonth+1, 0).getDate();\r\n          var value = \"\";\r\n        \r\n    \r\n        if (curDay <= daysInMonth){\r\n          //add date\r\n          var dateEntry = new Date(year,curMonth,curDay);\r\n          const options1 = { weekday: 'short'};\r\n          const options2 = { day: 'numeric' };\r\n          value = \"\"+dateEntry.toLocaleDateString('de-DE', options2)+\" \"+dateEntry.toLocaleDateString('de-DE', options1); \r\n        }else{\r\n          //add empty string  \r\n        }\r\n        \r\n        cells.push(value);\r\n      }\r\n      rows.push( { id: cells[0], Jan: cells[1], Feb: cells[2], Mar: cells[3], Apr: cells[4], May: cells[5], Jun: cells[6], Jul: cells[7], Aug: cells[8], Sep: cells[9], Oct: cells[10], Nov: cells[11], Dec: cells[12]})\r\n    }\r\n\r\n    /*for (var d = startDate; d <= endDate; d.setDate(d.getDate() + 1)) {\r\n        daysOfYear.push(new Date(d));\r\n    }*/\r\n\r\n   \r\n    /*for (var r = 0; r < daysOfYear.length;r++) {\r\n      rows.push( { id: r, title: daysOfYear[r].toLocaleDateString() })\r\n      \r\n    }*/\r\n\r\n   \r\n    \r\n   \r\n\r\n  \r\n\r\n    this.state = {\r\n      bestShows: [],\r\n      rows : rows,\r\n      columns : [\r\n        { key: 'id', name: 'ID' , width: 10},\r\n        { key: 'Jan', name: 'Januar', colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Jan_val', name: '',  width: 170},\r\n        { key: 'Feb', name: 'Februar',colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Feb_val', name: '', width: 170 },\r\n        { key: 'Mar', name: 'MÃ¤rz' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Mar_val', name: '' },\r\n        { key: 'Apr', name: 'April' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Apr_val', name: '' },\r\n        { key: 'May', name: 'Mai' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'May_val', name: '' },\r\n        { key: 'Jun', name: 'Juni' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Jun_val', name: '' },\r\n        { key: 'Jul', name: 'Juli' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Jul_val', name: '' },\r\n        { key: 'Aug', name: 'August',colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Aug_val', name: '' },\r\n        { key: 'Sep', name: 'September' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Sep_val', name: '' },\r\n        { key: 'Oct', name: 'Oktober',colSpan(args) { if (args.type === 'HEADER') {return 2;}} },\r\n        { key: 'Oct_val', name: '' },\r\n        { key: 'Nov', name: 'November' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Nov_val', name: '' },\r\n        { key: 'Dec', name: 'Dezember' ,colSpan(args) { if (args.type === 'HEADER') {return 2;}}},\r\n        { key: 'Dec_val', name: '' },\r\n      ]\r\n    };\r\n  }\r\n\r\n  \r\n\r\n  render() {\r\n    console.log(\"render bestShows: \", this.state.bestShows)\r\n    return (\r\n      <div>\r\n        Full Controle MF! HUHU\r\n        <DataGrid columns={this.state.columns} rows={this.state.rows} />\r\n        <ul>\r\n          {\r\n          \r\n\r\n              Object.keys(this.state.bestShows).map((key, i) => (\r\n                Object.keys(this.state.bestShows[key]).map((cur, idx) => (\r\n                  <li>{cur} - {this.state.bestShows[key][cur]} </li>\r\n                ))\r\n              ))\r\n\r\n    \r\n          }\r\n        </ul>\r\n        <Button variant=\"contained\" color=\"primary\">\r\n      Hello World\r\n    </Button>\r\n    <DenseTable/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}